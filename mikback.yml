---
- hosts: mikrotik
  gather_facts: no
  tasks:

    - name: Run backup with password (when password is defined)
      when: ansible_ssh_pass is defined
      block:

      - name: Ensure that sshpass is installed
        ansible.builtin.shell: whereis sshpass | awk '{print $2}'
        run_once: yes
        register: sshpass
        delegate_to: localhost

      - ansible.builtin.fail:
          msg: >-
            Playbook requires sshpass to use password authentication, please install
            sshpass and re-run the playbook again. 
            You can find details at https://www.redhat.com/sysadmin/ssh-automation-sshpass
        when: sshpass.stdout|length == 0

      - name: gather export (with password authentication)
        ansible.builtin.shell: >-
          sshpass -p '{{ ansible_ssh_pass }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ inventory_hostname }} /export
        register: export
        delegate_to: localhost

      - name: store export to local file
        ansible.builtin.shell: echo "{{ export.stdout }}" | grep -oP 'system identity\n\s+set name=\K\w+'
        register: identity_output
        changed_when: false
        failed_when: false
        ignore_errors: true
        delegate_to: localhost

      - name: store export with identity as filename
        ansible.builtin.copy:
          content: "{{ export.stdout }}"
          dest: "/var/lib/awx/projects/output/{{ identity_output.stdout | default('unknown_identity') }}.config"
        when: identity_output is succeeded
        delegate_to: localhost

      - name: Run backup without password (when password is not defined)
        when: ansible_ssh_pass is not defined
        block:

      - name: gather export (with passwordless authentication)
        ansible.builtin.shell: >-
          ssh {{ ansible_user }}@{{ inventory_hostname }} /export
        register: export
        delegate_to: localhost

      - name: store export to local file
        ansible.builtin.shell: echo "{{ export.stdout }}" | grep -oP 'system identity\n\s+set name=\K\w+'
        register: identity_output
        changed_when: false
        failed_when: false
        ignore_errors: true
        delegate_to: localhost

      - name: store export with identity as filename
        ansible.builtin.copy:
          content: "{{ export.stdout }}"
          dest: "output/{{ identity_output.stdout | default('unknown_identity') }}.config"
        when: identity_output is succeeded
        delegate_to: localhost
